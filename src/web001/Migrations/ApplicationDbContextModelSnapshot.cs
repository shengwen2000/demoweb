// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("web001")
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Shengwen.Primary.Model.PrimaryInfo", b =>
                {
                    b.Property<Guid>("ClientNo");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<int>("Priority");

                    b.Property<string>("RefreshPath")
                        .HasMaxLength(100);

                    b.Property<string>("SiteUrl")
                        .HasMaxLength(100);

                    b.HasKey("ClientNo", "Created");

                    b.ToTable("PrimaryInfo");
                });

            modelBuilder.Entity("Shengwen.QueueTask.Model.QtQueue<WebApp.Services.DefaultQueueContext>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("DefaultQtQueue");
                });

            modelBuilder.Entity("Shengwen.QueueTask.Model.QtQueueEvent<WebApp.Services.DefaultQueueContext>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("EvtKind");

                    b.Property<int>("QueueId");

                    b.Property<long>("TaskId");

                    b.HasKey("Id");

                    b.ToTable("DefaultQtQueueEvent");
                });

            modelBuilder.Entity("Shengwen.QueueTask.Model.QtQueueTask<WebApp.Services.DefaultQueueContext>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<DateTime>("Created");

                    b.Property<int>("QueueId");

                    b.Property<string>("Result")
                        .HasMaxLength(5000);

                    b.Property<short>("State");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("DefaultQtQueueTask");
                });

            modelBuilder.Entity("Shengwen.Scheduler.Model.JobCron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cron");

                    b.Property<int>("JobId");

                    b.Property<DateTime?>("LimitEnd");

                    b.Property<DateTime?>("LimitStart");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobCron");
                });

            modelBuilder.Entity("Shengwen.Scheduler.Model.JobInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<int?>("LastResultId");

                    b.Property<DateTime?>("LastRun");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("NextRun");

                    b.Property<int>("State");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("LastResultId");

                    b.ToTable("JobInfo");
                });

            modelBuilder.Entity("Shengwen.Scheduler.Model.JobResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Duration");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("Excetpion")
                        .HasMaxLength(1000);

                    b.Property<bool>("HasException");

                    b.Property<int>("JobId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobResult");
                });

            modelBuilder.Entity("Shengwen.Scheduler.Model.JobStorage", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Json");

                    b.HasKey("Id");

                    b.ToTable("JobStorage");
                });

            modelBuilder.Entity("WebApp.Data.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthMenus");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Desc")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WebApp.Data.AppRoleUser", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("WebApp.Data.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("EX_Name")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApp.Data.CopdNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatorId");

                    b.Property<int>("MemberId");

                    b.Property<string>("Note")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("CreatorId");

                    b.HasIndex("MemberId");

                    b.ToTable("CopdNote");
                });

            modelBuilder.Entity("WebApp.Data.CopdScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CalcDate");

                    b.Property<string>("Content")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("Created");

                    b.Property<int>("MemberId");

                    b.Property<int>("Score_CAT");

                    b.Property<int>("Score_COPD");

                    b.Property<int>("Score_mMRC");

                    b.Property<string>("State_CAT")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("MemberId");

                    b.ToTable("CopdScale");
                });

            modelBuilder.Entity("WebApp.Data.CopdVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("MemberId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("UpdaterId");

                    b.Property<string>("Url")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("FileId");

                    b.HasIndex("Created");

                    b.HasIndex("MemberId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CopdVideo");
                });

            modelBuilder.Entity("WebApp.Data.CruxMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addrs")
                        .HasMaxLength(500);

                    b.Property<DateTime>("Birth");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExitDate");

                    b.Property<float?>("Height");

                    b.Property<string>("LoginNo")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Note")
                        .HasMaxLength(200);

                    b.Property<string>("NotifyEmails")
                        .HasMaxLength(1000);

                    b.Property<string>("Phones")
                        .HasMaxLength(200);

                    b.Property<int?>("RegUserId");

                    b.Property<string>("SID")
                        .HasMaxLength(20);

                    b.Property<string>("Sex")
                        .HasMaxLength(1);

                    b.Property<float?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("LoginNo")
                        .IsUnique()
                        .HasFilter("[LoginNo] IS NOT NULL");

                    b.HasIndex("No")
                        .IsUnique();

                    b.HasIndex("RegUserId");

                    b.HasIndex("SID")
                        .IsUnique()
                        .HasFilter("[SID] IS NOT NULL");

                    b.ToTable("CruxMember");
                });

            modelBuilder.Entity("WebApp.Data.CruxMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsSuccess");

                    b.Property<int>("MemberId");

                    b.Property<string>("Result");

                    b.Property<string>("SendTo")
                        .HasMaxLength(1000);

                    b.Property<int>("SubjectId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("SubjectId");

                    b.ToTable("CruxMessage");
                });

            modelBuilder.Entity("WebApp.Data.CruxMsgSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<string>("Note")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("CruxMsgSubject");
                });

            modelBuilder.Entity("WebApp.Data.CruxVs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNo")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasMaxLength(2048);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("DataType")
                        .HasMaxLength(20);

                    b.Property<string>("DeviceNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("FromGateway")
                        .HasMaxLength(10);

                    b.Property<string>("IP")
                        .HasMaxLength(20);

                    b.Property<string>("LastResult")
                        .HasMaxLength(2048);

                    b.Property<DateTime?>("MeasureTime");

                    b.Property<int?>("MemberId");

                    b.Property<DateTime?>("NextSendTime");

                    b.Property<int>("QueueName");

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<string>("S1")
                        .HasMaxLength(1);

                    b.Property<int>("State");

                    b.Property<float?>("V1");

                    b.Property<float?>("V2");

                    b.Property<float?>("V3");

                    b.Property<string>("VS_PK")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("MemberId");

                    b.HasIndex("VS_PK")
                        .IsUnique()
                        .HasFilter("[VS_PK] IS NOT NULL");

                    b.HasIndex("EndTime", "QueueName", "NextSendTime");

                    b.ToTable("CruxVs");
                });

            modelBuilder.Entity("WebApp.Data.DbVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("DbVersion");
                });

            modelBuilder.Entity("WebApp.Data.SysIdEncode", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("XorNum");

                    b.HasKey("Id");

                    b.ToTable("SysIdEncode");
                });

            modelBuilder.Entity("WebApp.Data.TnTaskNotify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Complete");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("GId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Result")
                        .HasMaxLength(2000);

                    b.Property<int>("State");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TnTaskNotify");
                });

            modelBuilder.Entity("WebApp.Data.TnUserNotify", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TnUserNotify");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("WebApp.Data.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shengwen.QueueTask.Model.QtQueueTask<WebApp.Services.DefaultQueueContext>", b =>
                {
                    b.HasOne("Shengwen.QueueTask.Model.QtQueue<WebApp.Services.DefaultQueueContext>", "Queue")
                        .WithMany("Tasks")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shengwen.Scheduler.Model.JobCron", b =>
                {
                    b.HasOne("Shengwen.Scheduler.Model.JobInfo", "Job")
                        .WithMany("Crons")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shengwen.Scheduler.Model.JobInfo", b =>
                {
                    b.HasOne("Shengwen.Scheduler.Model.JobResult", "LastResult")
                        .WithMany()
                        .HasForeignKey("LastResultId");
                });

            modelBuilder.Entity("Shengwen.Scheduler.Model.JobResult", b =>
                {
                    b.HasOne("Shengwen.Scheduler.Model.JobInfo", "Job")
                        .WithMany("Results")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shengwen.Scheduler.Model.JobStorage", b =>
                {
                    b.HasOne("Shengwen.Scheduler.Model.JobInfo", "Job")
                        .WithOne("Storage")
                        .HasForeignKey("Shengwen.Scheduler.Model.JobStorage", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApp.Data.AppRoleUser", b =>
                {
                    b.HasOne("WebApp.Data.AppRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApp.Data.ApplicationUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApp.Data.CopdNote", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Data.CruxMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApp.Data.CopdScale", b =>
                {
                    b.HasOne("WebApp.Data.CruxMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApp.Data.CopdVideo", b =>
                {
                    b.HasOne("WebApp.Data.CruxMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebApp.Data.ApplicationUser", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WebApp.Data.CruxMember", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser", "RegUser")
                        .WithMany()
                        .HasForeignKey("RegUserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WebApp.Data.CruxMessage", b =>
                {
                    b.HasOne("WebApp.Data.CruxMember", "Member")
                        .WithMany("Messages")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Data.CruxMsgSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApp.Data.CruxVs", b =>
                {
                    b.HasOne("WebApp.Data.CruxMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApp.Data.TnTaskNotify", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApp.Data.TnUserNotify", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
